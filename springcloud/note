
一： Eureka服务注册与发现
Eureka有自我保护机制
Eureka集群配置

作为注册中心，Eureka比Zookeeper好在哪里？
Zookeeper保证CP：
当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟之前的注册信息，但不能接收的是
服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种
情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，
选取leader的时间太长，30～120s,且选举期间整个zk集群是不可用的，这就导致选举期间整个注册服务
瘫痪。在云部署的环境下，因网络问题使的zk集群失去master节点是较大概率会发生的事情，虽然服务能够
最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。

Eureka保证AP
Eureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉
不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端向某个Eureka
注册时如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保证注册服务可用
(保证可用性)，只不过查到的信息可能不是最新的（不保证强一致性）。除此之外，Eureka还有一种自我
保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端和注册中心出现了
网络故障，此时会出现一下几种情况：
1、Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务。
2、Eureka仍然能够接收新服务的注册和查询请求，但是不会被同步到其他节点上。（即保证当前节点依然可用）
3、当网络稳定时，当前实例新的注册信息会被同步到其他节点中。

因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个
注册服务瘫痪。

ACID:多线程的四个基本原则
A：原子性
C：一致性
I: 独立性
D：持久性

一个分布式系统不可能同时满足CAP。由于分区容错性在分布式系统中是必须保证的，
因此只能在A和C之间权衡。

CAP原则
C:强一致性
A:可用性
P:分区容错性


二： Ribbon负载均衡：
一个微服务下面可以挂多个实例
使用Ribbon进行负载均衡的时候，采用轮询来实现客户端的负载均衡

总结：
Ribbon其实就是一个软负载均衡的客户端组件，他可以和其他所需请求的客户端结合使用，
和Eureka结合只是其中的一个实例。

Ribbon是客户端的，有多种负载均衡策略。

三、feign负载均衡


四、Hystrix服务熔断

服务熔断：一般是某个服务故障或者异常引起，类似现实世界中的"保险丝"，当某个异常条件被触发，
直接熔断整个服务，而不是一直等到此服务超时。

服务降级：所谓降级，一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不再被调用，
此时客户端可以准备一个本地的fullback回调，返回一个缺省值。
这样做，虽然服务水平下降，但是好歹可用，比直接挂掉要强。











